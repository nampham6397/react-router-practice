{"ast":null,"code":"var _jsxFileName = \"/Users/nampham/Downloads/09-time-to-practice-starting-code/src/pages/QuoteDetail.js\",\n    _s = $RefreshSig$();\n\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\nimport { Fragment, useEffect } from \"react\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_QUOTES = [{\n  id: 'q1',\n  author: 'Nam',\n  text: 'Learning React is fun!'\n}, {\n  id: 'q2',\n  author: 'NamP',\n  text: 'Learning React is very fun!'\n}];\n\nconst QuoteDetail = () => {\n  _s();\n\n  const params = useParams();\n  const match = useRouteMatch();\n  const {\n    quoteId\n  } = params;\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error\n  } = useHttp(getSingleQuote, true);\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === 'pending') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 16\n    }, this);\n  }\n\n  const quote = DUMMY_QUOTES.find(quote => quote.id === params.quoteId);\n\n  if (!quote) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No quote found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(HighlightedQuote, {\n      text: quote.text,\n      author: quote.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: match.path,\n      exact: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centered\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn--flat\",\n          to: `${match.url}/comments`,\n          children: \"Load Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${match.path}/comments`,\n      children: /*#__PURE__*/_jsxDEV(Comments, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuoteDetail, \"rFVsORolCpeCxhEDa/sQhUgk0w8=\", false, function () {\n  return [useParams, useRouteMatch, useHttp];\n});\n\n_c = QuoteDetail;\nexport default QuoteDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteDetail\");","map":{"version":3,"sources":["/Users/nampham/Downloads/09-time-to-practice-starting-code/src/pages/QuoteDetail.js"],"names":["useParams","Route","Link","useRouteMatch","Fragment","useEffect","Comments","HighlightedQuote","useHttp","getSingleQuote","LoadingSpinner","DUMMY_QUOTES","id","author","text","QuoteDetail","params","match","quoteId","sendRequest","status","data","loadedQuote","error","quote","find","path","url"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,aAAjC,QAAsD,kBAAtD;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,YAAY,GAAG,CACjB;AAAEC,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,MAAM,EAAE,KAApB;AAA2BC,EAAAA,IAAI,EAAE;AAAjC,CADiB,EAEjB;AAAEF,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,MAAM,EAAE,MAApB;AAA4BC,EAAAA,IAAI,EAAE;AAAlC,CAFiB,CAArB;;AAKA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAMC,MAAM,GAAGhB,SAAS,EAAxB;AACA,QAAMiB,KAAK,GAAGd,aAAa,EAA3B;AAEA,QAAM;AAAEe,IAAAA;AAAF,MAAcF,MAApB;AAEA,QAAM;AAACG,IAAAA,WAAD;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,IAAI,EAAEC,WAA5B;AAAyCC,IAAAA;AAAzC,MAAkDf,OAAO,CAACC,cAAD,EAAiB,IAAjB,CAA/D;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,WAAW,CAACD,OAAD,CAAX;AACH,GAFQ,EAEN,CAACC,WAAD,EAAcD,OAAd,CAFM,CAAT;;AAIA,MAAIE,MAAM,KAAK,SAAf,EAA0B;AACtB,wBAAO;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACH,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADG;AAAA;AAAA;AAAA;AAAA,YAAP;AAGH;;AACD,QAAMI,KAAK,GAAGb,YAAY,CAACc,IAAb,CAAkBD,KAAK,IAAIA,KAAK,CAACZ,EAAN,KAAaI,MAAM,CAACE,OAA/C,CAAd;;AAEA,MAAI,CAACM,KAAL,EAAY;AACR,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI,QAAC,QAAD;AAAA,4BACI,QAAC,gBAAD;AAAkB,MAAA,IAAI,EAAEA,KAAK,CAACV,IAA9B;AAAoC,MAAA,MAAM,EAAEU,KAAK,CAACX;AAAlD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEI,KAAK,CAACS,IAAnB;AAAyB,MAAA,KAAK,MAA9B;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,WAAhB;AAA4B,UAAA,EAAE,EAAG,GAAET,KAAK,CAACU,GAAI,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ,eAOI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEV,KAAK,CAACS,IAAK,WAA3B;AAAA,6BACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CApCD;;GAAMX,W;UACaf,S,EACDG,a,EAI0CK,O;;;KANtDO,W;AAsCN,eAAeA,WAAf","sourcesContent":["import { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\nimport {Fragment, useEffect} from \"react\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\n\nconst DUMMY_QUOTES = [\n    { id: 'q1', author: 'Nam', text: 'Learning React is fun!' },\n    { id: 'q2', author: 'NamP', text: 'Learning React is very fun!' }\n]\n\nconst QuoteDetail = () => {\n    const params = useParams();\n    const match = useRouteMatch();\n\n    const { quoteId } = params;\n\n    const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true);\n\n    useEffect(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    if (status === 'pending') {\n        return <div className='centered'>\n            <LoadingSpinner />\n        </div>\n    }\n    const quote = DUMMY_QUOTES.find(quote => quote.id === params.quoteId);\n\n    if (!quote) {\n        return <p>No quote found</p>;\n    }\n\n    return (\n        <Fragment>\n            <HighlightedQuote text={quote.text} author={quote.author} />\n            <Route path={match.path} exact>\n                <div className='centered'>\n                    <Link className='btn--flat' to={`${match.url}/comments`}>Load Comment</Link>\n                </div>\n            </Route>\n            <Route path={`${match.path}/comments`}>\n                <Comments />\n            </Route>\n        </Fragment>\n    );\n};\n\nexport default QuoteDetail;"]},"metadata":{},"sourceType":"module"}